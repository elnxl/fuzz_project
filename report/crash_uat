INFO: Seed: 3522732086
INFO: Loaded 1 modules   (4 inline 8-bit counters): 4 [0x5adf60, 0x5adf64), 
INFO: Loaded 1 PC tables (4 PCs): 4 [0x5708d8,0x570918), 
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
=================================================================
==2700==ERROR: AddressSanitizer: stack-use-after-return on address 0x7faf66052248 at pc 0x000000555d03 bp 0x7ffdba9bc4f0 sp 0x7ffdba9bc4e8
READ of size 4 at 0x7faf66052248 thread T0
    #0 0x555d02 in LLVMFuzzerTestOneInput /mnt/hgfs/f/DSEC/fuzzer/uat/uat.cpp:17:12
    #1 0x45c791 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x45c791)
    #2 0x45bed5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x45bed5)
    #3 0x45ddea in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x45ddea)
    #4 0x45e079 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x45e079)
    #5 0x44dd85 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x44dd85)
    #6 0x4759d2 in main (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x4759d2)
    #7 0x7faf693cdd09 in __libc_start_main csu/../csu/libc-start.c:308:16
    #8 0x4225a9 in _start (/mnt/hgfs/f/DSEC/fuzzer/uat/uat+0x4225a9)

Address 0x7faf66052248 is located in stack of thread T0 at offset 72 in frame
    #0 0x555a0f in FunctionThatEscapesLocalObject() /mnt/hgfs/f/DSEC/fuzzer/uat/uat.cpp:9

  This frame has 1 object(s):
    [32, 432) 'local' (line 10) <== Memory access at offset 72 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-return /mnt/hgfs/f/DSEC/fuzzer/uat/uat.cpp:17:12 in LLVMFuzzerTestOneInput
Shadow bytes around the buggy address:
  0x0ff66cc023f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff66cc02400: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02410: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02420: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02430: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
=>0x0ff66cc02440: f5 f5 f5 f5 f5 f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5
  0x0ff66cc02450: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02460: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02470: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff66cc02480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff66cc02490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==2700==ABORTING
MS: 0 ; base unit: 0000000000000000000000000000000000000000
0xa,
\x0a
artifact_prefix='./'; Test unit written to ./crash-adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
Base64: Cg==
