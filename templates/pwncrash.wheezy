@require(crash, exe, host, port, user, password, path, quiet, color)
@(
import sys
from pathlib import PurePath, Path
import json

argv = list(sys.argv)
argv[0] = PurePath(argv[0]).name

try:
    if crash:
        crash_json = json.load(Path(crash).open())
except ValueError:
    pass
if not crash:        
    crash = '../path/to/crash'
    crash_json = None
ssh = user or password
if ssh and not port:
    port = 22
elif host and not port:
    port = 1337

remote_path = path or exe
password = password
if not exe:
    exe = '../path/to/exe'
)\
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
@if not quiet:
# This exploit template was generated via:
# $ @argv[0]
@endif

from pwn import *
@if not quiet:
# Many built-in settings can be controlled on the 
# command-line and show up in "args".
# DEBUG, HOST, PORT, EXE, CRASH 
@if host or port or user:
# ./exploit.py HOST=example.com PORT=1337
@endif
@endif

@if crash:
crash = args.CRASH or '@crash!s'
@endif
@if exe:
exe = ELF(args.EXE or '@exe!s')
@endif
@if host:
host = args.HOST or '@host!s'
@endif
@if port:
port = int(args.PORT or @port!s)
@endif
@if user:
user = args.USER or @user!s
password = args.PASSWORD or @password!s
@endif
@if ssh:
remote_path = @remote_path!s
@endif
@if ssh:
# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)
@endif

@if host:
def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
@if ssh:
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)
@else:
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io
    @endif
@endif
@if host:
def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)
@else:
def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)
@endif
@if not quiet:
# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
@endif
gdbscript = '''
'''.format(**locals())

@if not quiet:
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
@else:
# -- Exploit goes here --
@endif

# EXTARCTED DATA FROM CRASH

@#FUNCTION TO PRINT DICTIONARY FROM CRASH
\
@def print_dict(crash_data):
@#ignore                                                #//for function work 
@for key, value in crash_data.items():
@if key == 'registers state' or key == 'file':          #// in 'registers state' and 'file' dict has multiple values
# @key!s
    @for key_inner, value_inner in value.items():
    # @key_inner!s = @value_inner!s
    @endfor
@elif key == 'field':                                   #// shadow memory handle
@for all_shadow_mem in value:
@for shadow_memory, shadow_bytes in all_shadow_mem.items():
# @shadow_memory = \
@for el in shadow_bytes: 
@el \
@endfor

@endfor
@endfor
@else:
# @key!s = @value!s
@endif
@endfor
@end
\
@#FUNCTION TO PROCESSING CRASH REPORT
@def crash_process(crash_data):
@#ignore                                                #//for function work
@for el in crash_data:
@(try:)@print_dict(el)
@#ignore                                                #// for function work
@(except AttributeError:)@crash_process(el)
@endfor
@end
\
@crash_process(crash_json)\
\
io = start()

@if not quiet:
# payload = b''
# payload += b'0xdeadbeef'
# payload.ljust(48, b'_')
# io.send(payload)
# flag = io.recvline()
# log.success(flag)
@endif

io.interactive()